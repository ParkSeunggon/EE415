S 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Park Seunggon  - psg9707@kaist.ac.kr
Kim Yongsik  - kys7563@kaist.ac.kr

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We didn't implement extra credit.
We couldn't pass persistence cases.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Pintos slide(KR,ENG)


		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in inode.c,

struct inode_disk has changed into

struct inode_disk
{
off_t length; //file size in bytes
unsigned magic; 
uint32_t is_dir;  //indicating if the inode is directory or file                                                                                                                                
 block_sector_t direct_map_table[DIRECT_BLOCK_ENTRIES];                                                           
block_sector_t indirect_block_sec;                                                                                                                            
block_sector_t double_indirect_block_sec;  
}
direct map table and indirect/double_indirect block sectors are used to manage data blocks efficiently.
DIRECT_BLOCK_ENTRIES is defined to be 123, which sets the size of inode_disk to 512.

Also,

enum direct_t{
NORMAL_DIRECT,
INDIRECT,
DOUBLE_INDIRECT,
OUT_LIMIT
}

is defined to indicate what block a inode is pointing to

struct sector_location{
	char directness;
	off_t index1;
	off_t index2;
}

is defined to store the information about index block.
Directness indicates whether the block is from DIRECT/INDIRECT/DOUBLE_INDIRECT, and indices indicate offsets of each block.
(Index2 is only used for Double indirect block)	

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

There are 123 Direct blocks, which supports 123 * 512bytes = 62976bytes
There is a indirect block connected to 128 sectors, which supports 128 * 512 bytes = 65536bytes 
Finally, there is a double indirect block connected to 128 indirect blocks 128 * (128 * 512) bytes = 8388608bytes
The maximum is 8517120bytes (~8.5MB)


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

In inode structure, we added a lock 'extended_lock'
Whenever extending a file size, we acquired the extended_lock for synchronization.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

Length increase only occurs in inode_write_at function.  
By appropriately acquiring and releasing lock when updating the file length,
A is not able to read while B is writing, and A will be able to read what B has written after B is done writing.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

We do not implement blocking writes when reading. (no condition variable or lock used)
Therefore, many processes can write data while a process is reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Inode structure has multi level indices. We followed the provided pintos slide because it seemed reasonable to us.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In inode_disk structure, is_dir is added to indicate if the inode is pointing to a file or a directory.
In thread structure, we added dir indicating current working directory of the thread.


---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

When parsing the given name, the distinguisher between absolute and relative path is the first character of the name.
When the name starts with '/', the process starts at the root directory. On the other hand, the process starts at thread's current directory when its first path character is not '/'. 

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We did not consider synchronization in this part.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

When deleting directory, we call dir_remove, which then calls inode_remove.
Inode_remove says "marks inode to be deleted when it is closed by the last caller", but we didn't impelment that.
I think this is the reason why we could not pass persistence cases.
Inode is not successfully deleted after file system is done, so that we could not proceed to additional operations.


---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

Current directory of a process is stored in the struct thread. 
It is easier to call cwd because we can directly call thread_current()->dir to get the current directory used.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In cache.h, newly added structure is

struct buffer_head                                                                                                                                                                           
{                                                                                                                                                                                             
bool is_dirty; // if the data is changed(dirty)                                                                                                                                                                              
bool is_accessed; //if the data is in use                                                                                                                                                                             
block_sector_t disk_sector; //disk sector number                                                                                                                                                                  
struct lock buffer_lock; // for synchronization                                                                                                                                                                     
bool clock; //for clock algorithm (eviction mechanism)                                                                                                                                                                                   
void *data; //pointer for buffer cache entry                                                                                                                                                                       
};    
buffer_head structure is to manage each buffer cache's entry

In cache.c, global variables are

void *p_buffer_cache; // pointer to memory region of buffer cache
strut buffer_head buffer_head_array[BUFFER_CACHE_ENTRY_NB]; // array to manage buffer heads
int clock_hand; // for clock algorithm (eviction mechanism)



---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

It is implemented in the function bc_select_victim, which is a LRU based eviction scheme. 
Clock bit in the buffer head structure indicates if buf head is 
Initially, each buffer_head's clock bit(buf_head.clock) is set to false. (Clock bit indicates buf head is accessed recently)
First if the buffer_head_array is not full, no eviction is needed.
If the array is full, eviction is needed. 
First we check the clock bit, if it's false, then select the buf_head to be evicted.


>> C3: Describe your implementation of write-behind.

We did not use timer function for write behind.
We used dirty bit in each buf_head, only dirty blocks are written to the disk when they are evicted. (in bc_select_victim)
Also, when the pintos finshes its operation, bc_flush_all_entry is called, which makes all dirty blocks written to the disk.

>> C4: Describe your implementation of read-ahead.

We didn't implement read-ahead


---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

Whenever we read or write data(bc_read or bc_write), we acquired and released a lock for synchronization. (buffer_lock) 

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

We also used buffer_lock for synchronization


---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Buffer caching - A workload that accesses same blocks
Read-ahead - A workload that accesses the data in a sequential manner
Write-behind - A workload that do not need to write back data directly

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?

